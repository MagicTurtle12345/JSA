// assets/js/recipes.js

// D·ªØ li·ªáu m·∫´u ban ƒë·∫ßu n·∫øu localStorage r·ªóng
const defaultRecipes = [
    {
        id: 1,
        name: "Ph·ªü B√≤ Truy·ªÅn Th·ªëng",
        category: "M√≥n ch√≠nh", // ƒê√£ s·ª≠a category ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n
        difficulty: "Trung b√¨nh",
        time: 180,
        servings: 4,
        description: "M√≥n ƒÉn qu·ªëc h·ªìn qu·ªëc t√∫y c·ªßa Vi·ªát Nam v·ªõi n∆∞·ªõc d√πng ƒë·∫≠m ƒë√†, th·ªãt b√≤ m·ªÅm v√† h∆∞∆°ng th∆°m c·ªßa c√°c lo·∫°i gia v·ªã.",
        ingredients: ["X∆∞∆°ng b√≤ (1kg)", "Th·ªãt b√≤ n·∫°m/t√°i (300g)", "B√°nh ph·ªü (1kg)", "G·ª´ng, h√†nh t√¢y (1 c·ªß)", "Hoa h·ªìi, qu·∫ø, th·∫£o qu·∫£ (m·ªôt √≠t)", "Rau th∆°m, chanh, ·ªõt"],
        instructions: ["Ninh x∆∞∆°ng b√≤ l·∫•y n∆∞·ªõc d√πng (t·ªëi thi·ªÉu 3 ti·∫øng)", "Rang g·ª´ng, h√†nh, gia v·ªã, sau ƒë√≥ cho v√†o n·ªìi n∆∞·ªõc d√πng", "N√™m n·∫øm gia v·ªã cho n∆∞·ªõc d√πng v·ª´a ƒÉn", "Ch·∫ßn b√°nh ph·ªü qua n∆∞·ªõc s√¥i", "X·∫øp b√°nh ph·ªü, th·ªãt b√≤ v√†o t√¥, chan n∆∞·ªõc d√πng n√≥ng", "ƒÇn k√®m rau th∆°m, chanh, ·ªõt."],
        image: "assets/images/pho-bo.jpg", // Gi·∫£ ƒë·ªãnh c√≥ ·∫£nh
        tags: ["Vi·ªát Nam", "M√≥n ch√≠nh", "Truy·ªÅn th·ªëng", "Ph·ªü"],
        author: "Default",
        createdAt: "2024-01-10T10:00:00Z",
    },
    {
        id: 2,
        name: "B√°nh M√¨ K·∫πp Th·ªãt N∆∞·ªõng",
        category: "ƒÇn nh·∫π",
        difficulty: "D·ªÖ",
        time: 45,
        servings: 2,
        description: "M√≥n ƒÉn ƒë∆∞·ªùng ph·ªë n·ªïi ti·∫øng th·∫ø gi·ªõi, k·∫øt h·ª£p h√†i h√≤a gi·ªØa v·ªã m·∫∑n c·ªßa th·ªãt n∆∞·ªõng, chua ng·ªçt c·ªßa ƒë·ªì chua v√† gi√≤n tan c·ªßa b√°nh m√¨.",
        ingredients: ["Th·ªãt heo ba ch·ªâ (200g)", "B√°nh m√¨ (2 ·ªï)", "ƒê·ªì chua (c√† r·ªët, c·ªß c·∫£i)", "Pate", "Rau m√πi, ·ªõt", "N∆∞·ªõc s·ªët ∆∞·ªõp th·ªãt"],
        instructions: ["∆Ø·ªõp th·ªãt v·ªõi gia v·ªã, n∆∞·ªõng ch√≠n (ho·∫∑c chi√™n)", "C·∫Øt b√°nh m√¨ d·ªçc theo chi·ªÅu d√†i, ph·∫øt pate", "K·∫πp th·ªãt n∆∞·ªõng, ƒë·ªì chua, rau m√πi v√† ·ªõt v√†o b√°nh m√¨."],
        image: "assets/images/banh-mi.jpg", // Gi·∫£ ƒë·ªãnh c√≥ ·∫£nh
        tags: ["Vi·ªát Nam", "ƒÇn nh·∫π", "ƒê∆∞·ªùng ph·ªë", "Th·ªãt heo"],
        author: "Default",
        createdAt: "2024-05-20T15:30:00Z",
    },
];

// Recipe management system
class RecipeManager {
    constructor() {
        this.recipes = [];
        this.filteredRecipes = [];
        this.favorites = new Set();
        this.currentView = "grid";
        this.init();
    }

    init() {
        this.loadData();
        this.loadDefaultRecipes();
        this.setupEventListeners();
        this.filterRecipes(); 
        this.updateStats();
    }

    loadData() {
        const savedRecipes = localStorage.getItem("recipes");
        if (savedRecipes) {
            this.recipes = JSON.parse(savedRecipes);
        }

        const savedFavorites = localStorage.getItem("favorites");
        if (savedFavorites) {
            this.favorites = new Set(JSON.parse(savedFavorites));
        }
    }

    saveData() {
        localStorage.setItem("recipes", JSON.stringify(this.recipes));
        localStorage.setItem("favorites", JSON.stringify([...this.favorites]));
    }

    loadDefaultRecipes() {
        if (this.recipes.length === 0) {
            this.recipes = defaultRecipes;
            this.saveData(); 
        }
    }

    // ===============================================
    // C√ÅC H√ÄM X·ª¨ L√ù MODAL TH√äM/S·ª¨A
    // ===============================================

    showAddRecipeModal(recipe = null) {
        const modal = document.getElementById("addRecipeModal");
        const form = document.getElementById("addRecipeForm");
        
        form.reset();
        form.dataset.editId = "";
        document.querySelector("#addRecipeModal h2").textContent = "Th√™m C√¥ng Th·ª©c M·ªõi";
        document.getElementById("submitRecipeBtn").textContent = "‚ûï Th√™m C√¥ng Th·ª©c";

        if (recipe) {
            document.querySelector("#addRecipeModal h2").textContent = "Ch·ªânh S·ª≠a C√¥ng Th·ª©c";
            document.getElementById("submitRecipeBtn").textContent = "üíæ C·∫≠p Nh·∫≠t C√¥ng Th·ª©c";
            form.dataset.editId = recipe.id;
            
            document.getElementById("recipeName").value = recipe.name || '';
            document.getElementById("recipeCategory").value = recipe.category || 'M√≥n ch√≠nh';
            document.getElementById("recipeDifficulty").value = recipe.difficulty || 'D·ªÖ';
            document.getElementById("recipeTime").value = recipe.time || 30;
            document.getElementById("recipeServings").value = recipe.servings || 4;
            document.getElementById("recipeDescription").value = recipe.description || '';
            document.getElementById("recipeIngredients").value = recipe.ingredients ? recipe.ingredients.join('\n') : '';
            document.getElementById("recipeInstructions").value = recipe.instructions ? recipe.instructions.join('\n') : '';
            document.getElementById("recipeImage").value = recipe.image || '';
            document.getElementById("recipeTags").value = recipe.tags ? recipe.tags.join(', ') : '';
        }

        modal.style.display = "block";
    }

    hideAddRecipeModal() {
        const modal = document.getElementById("addRecipeModal");
        const form = document.getElementById("addRecipeForm");
        
        modal.style.display = "none";
        form.reset();
        form.dataset.editId = "";
    }

    // ===============================================
    // C√ÅC H√ÄM X·ª¨ L√ù MODAL CHI TI·∫æT C√îNG TH·ª®C (M·ªöI)
    // ===============================================

    /**
     * Hi·ªÉn th·ªã modal chi ti·∫øt c√¥ng th·ª©c v√† ƒëi·ªÅn d·ªØ li·ªáu.
     * @param {number} id - ID c·ªßa c√¥ng th·ª©c.
     */
    showRecipeDetailModal(id) {
        const recipeId = Number(id);
        const recipe = this.recipes.find(r => r.id === recipeId);

        if (!recipe) {
            alert("Kh√¥ng t√¨m th·∫•y c√¥ng th·ª©c!");
            return;
        }

        const modal = document.getElementById("recipeDetailModal");
        // Gi·∫£ ƒë·ªãnh c√¥ng th·ª©c kh√¥ng ph·∫£i m·∫∑c ƒë·ªãnh l√† c·ªßa user
        const isOwner = recipe.author !== "Default"; 

        // 1. ƒêi·ªÅn th√¥ng tin c∆° b·∫£n
        document.getElementById("detailRecipeName").textContent = recipe.name;
        document.getElementById("detailRecipeImage").src = recipe.image || 'assets/images/default-recipe.jpg';

        // 2. ƒêi·ªÅn Meta
        document.getElementById("detailRecipeCategory").textContent = recipe.category;
        document.getElementById("detailRecipeDifficulty").textContent = recipe.difficulty;
        document.getElementById("detailRecipeTime").textContent = `${recipe.time} ph√∫t`;
        document.getElementById("detailRecipeServings").textContent = `${recipe.servings} ph·∫ßn`;
        document.getElementById("detailRecipeDescription").textContent = recipe.description;
        
        // Th√™m th√¥ng tin t√°c gi·∫£ v√† ng√†y t·∫°o
        const date = new Date(recipe.createdAt).toLocaleDateString('vi-VN');
        const authorElement = document.getElementById("detailRecipeAuthor");
        if (authorElement) authorElement.textContent = `T√°c gi·∫£: ${recipe.author} | Ng√†y t·∫°o: ${date}`;


        // 3. ƒêi·ªÅn Nguy√™n li·ªáu (Ingredients)
        const ingredientsList = document.getElementById("detailRecipeIngredients");
        // S·ª≠ d·ª•ng c√°c item list v·ªõi icon 
        ingredientsList.innerHTML = recipe.ingredients.map(ing => `<li><i class="fas fa-check-circle ingredient-icon"></i> ${ing}</li>`).join('');

        // 4. ƒêi·ªÅn H∆∞·ªõng d·∫´n (Instructions)
        const instructionsList = document.getElementById("detailRecipeInstructions");
        // S·ª≠ d·ª•ng ordered list (s·ªë th·ª© t·ª±)
        instructionsList.innerHTML = recipe.instructions.map(inst => `<li>${inst}</li>`).join('');
        
        // 5. ƒêi·ªÅn Tags
        const tagsContainer = document.querySelector("#detailRecipeTags .tags-container");
        const tagsSection = document.getElementById("detailRecipeTags");
        if (recipe.tags && recipe.tags.length > 0) {
            tagsContainer.innerHTML = recipe.tags.map(tag => `<span class="tag">${tag}</span>`).join('');
            tagsSection.style.display = 'block';
        } else {
            tagsSection.style.display = 'none';
        }

        // 6. C·∫≠p nh·∫≠t n√∫t Y√™u th√≠ch
        const favoriteBtn = document.getElementById("favoriteBtn");
        const isFavorite = this.favorites.has(recipeId);
        favoriteBtn.innerHTML = isFavorite ? '<span class="heart">‚ù§Ô∏è</span> B·ªè y√™u th√≠ch' : '<span class="heart">‚ô°</span> Y√™u th√≠ch';
        
        // G√°n s·ª± ki·ªán Y√™u th√≠ch ngay trong h√†m n√†y
        favoriteBtn.onclick = (e) => { 
            e.stopPropagation();
            this.toggleFavorite(recipeId);
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i icon ngay l·∫≠p t·ª©c trong modal
            const isFav = this.favorites.has(recipeId);
            favoriteBtn.innerHTML = isFav ? '<span class="heart">‚ù§Ô∏è</span> B·ªè y√™u th√≠ch' : '<span class="heart">‚ô°</span> Y√™u th√≠ch';
            // C·∫≠p nh·∫≠t lu√¥n th·∫ª c√¥ng th·ª©c
            this.filterRecipes(); 
        };

        // 7. C·∫≠p nh·∫≠t n√∫t Ch·ªânh s·ª≠a/X√≥a (ch·ªâ hi·ªán khi l√† c√¥ng th·ª©c c·ªßa user)
        const editBtn = document.getElementById("editRecipeBtn");
        const deleteBtn = document.getElementById("deleteRecipeBtn");
        
        if (isOwner) {
            editBtn.style.display = 'inline-block';
            deleteBtn.style.display = 'inline-block';
            editBtn.onclick = () => { this.hideRecipeDetailModal(); this.editRecipe(recipeId); };
            deleteBtn.onclick = () => { this.hideRecipeDetailModal(); this.deleteRecipe(recipeId); };
        } else {
            editBtn.style.display = 'none';
            deleteBtn.style.display = 'none';
        }

        // 8. Hi·ªÉn th·ªã modal
        modal.style.display = "block";
    }

    hideRecipeDetailModal() {
        document.getElementById("recipeDetailModal").style.display = "none";
    }

    // ===============================================
    // H√ÄM X·ª¨ L√ù FORM SUBMIT (GI·ªÆ NGUY√äN)
    // ===============================================

    handleAddRecipe(event) {
        event.preventDefault(); 

        const form = document.getElementById("addRecipeForm");
        const formData = new FormData(form);
        const editId = form.dataset.editId;

        const name = formData.get("name").trim();
        const category = formData.get("category");
        const difficulty = formData.get("difficulty");
        const time = Number.parseInt(formData.get("time")) || 0;
        const servings = Number.parseInt(formData.get("servings")) || 1;
        const description = formData.get("description").trim();
        
        const ingredients = formData.get("ingredients").split('\n').map(item => item.trim()).filter(item => item.length > 0);
        const instructions = formData.get("instructions").split('\n').map(item => item.trim()).filter(item => item.length > 0);
        
        const image = formData.get("image").trim() || "assets/images/default-recipe.jpg"; 
        
        const tagsInput = formData.get("tags");
        const tags = tagsInput ? tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0) : [];
        
        const user = JSON.parse(localStorage.getItem('user'));
        const author = user ? user.name : "Ng∆∞·ªùi ƒë√≥ng g√≥p"; 

        const newRecipe = {
            name,
            category,
            difficulty,
            time,
            servings,
            description,
            ingredients,
            instructions,
            image,
            tags,
            author,
            createdAt: new Date().toISOString(),
        };

        if (editId) {
            const idToEdit = Number(editId);
            const index = this.recipes.findIndex(r => r.id === idToEdit);
            if (index !== -1) {
                this.recipes[index] = { ...this.recipes[index], ...newRecipe, id: idToEdit }; 
            }
            alert("C√¥ng th·ª©c ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
        } else {
            newRecipe.id = Date.now() + Math.floor(Math.random() * 1000); 
            this.recipes.unshift(newRecipe);
            alert("C√¥ng th·ª©c m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m!");
        }

        this.saveData(); 
        this.filterRecipes();
        this.hideAddRecipeModal();
    }
    
    // ===============================================
    // H√ÄM L·∫ÆNG NGHE S·ª∞ KI·ªÜN (ƒê√É C·∫¨P NH·∫¨T)
    // ===============================================

    setupEventListeners() {
        // N√∫t ch√≠nh "Th√™m C√¥ng Th·ª©c"
        const addRecipeBtn = document.getElementById("addRecipeBtn");
        if (addRecipeBtn) {
            addRecipeBtn.addEventListener("click", () => this.showAddRecipeModal());
        }
        
        // N√∫t "Th√™m C√¥ng Th·ª©c ƒê·∫ßu Ti√™n" khi ch∆∞a c√≥ c√¥ng th·ª©c n√†o
        const firstRecipeBtn = document.getElementById("firstRecipeBtn");
        if (firstRecipeBtn) {
            firstRecipeBtn.addEventListener("click", () => this.showAddRecipeModal());
        }

        // Form Submit
        const addRecipeForm = document.getElementById("addRecipeForm");
        if (addRecipeForm) {
            addRecipeForm.addEventListener("submit", (e) => this.handleAddRecipe(e));
        }

        // ƒê√≥ng Modal Th√™m/S·ª≠a
        const addModal = document.getElementById("addRecipeModal");
        if (addModal) {
            const closeModalBtn = addModal.querySelector(".modal-close");
            const cancelBtn = document.getElementById("cancelRecipe");
            
            if (closeModalBtn) closeModalBtn.addEventListener("click", () => this.hideAddRecipeModal());
            if (cancelBtn) cancelBtn.addEventListener("click", () => this.hideAddRecipeModal());
            
            window.addEventListener('click', (event) => {
                if (event.target === addModal) {
                    this.hideAddRecipeModal();
                }
            });
        }
        
        // L·∫Øng nghe s·ª± ki·ªán ƒë√≥ng Modal Chi ti·∫øt (M·ªöI)
        const detailModal = document.getElementById("recipeDetailModal");
        if (detailModal) {
            const closeModalBtn = detailModal.querySelector(".modal-close");
            
            if (closeModalBtn) closeModalBtn.addEventListener("click", () => this.hideRecipeDetailModal());
            
            // ƒê√≥ng khi click ra ngo√†i
            window.addEventListener('click', (event) => {
                if (event.target === detailModal) {
                    this.hideRecipeDetailModal();
                }
            });
            
            // L·∫Øng nghe n√∫t Print
            const printBtn = document.getElementById("printBtn");
            if (printBtn) {
                printBtn.addEventListener('click', () => window.print());
            }
        }

        // Event Listeners cho b·ªô l·ªçc (Gi·ªØ nguy√™n)
        document.getElementById("searchInput")?.addEventListener("input", () => this.filterRecipes());
        document.getElementById("categoryFilter")?.addEventListener("change", () => this.filterRecipes());
        document.getElementById("difficultyFilter")?.addEventListener("change", () => this.filterRecipes());
        document.getElementById("timeFilter")?.addEventListener("change", () => this.filterRecipes());
        document.getElementById("authorFilter")?.addEventListener("change", () => this.filterRecipes());

        // Event Listener cho n√∫t Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô xem
        document.getElementById("viewModeBtn")?.addEventListener("click", () => this.toggleViewMode());

    }
    
    // ===============================================
    // C√ÅC H√ÄM KH√ÅC (ƒê√É C·∫¨P NH·∫¨T)
    // ===============================================
    
    // C·∫¨P NH·∫¨T: Th√™m s·ª± ki·ªán m·ªü modal chi ti·∫øt
    createRecipeCard(recipe) {
        const isFavorite = this.favorites.has(recipe.id);
        
        const card = document.createElement("div");
        card.className = `recipe-card ${this.currentView === 'list' ? 'list-view' : ''}`;
        card.dataset.id = recipe.id;

        const starClass = isFavorite ? 'fas fa-heart' : 'far fa-heart'; // S·ª≠ d·ª•ng icon tr√°i tim

        card.innerHTML = `
            <div class="recipe-image-section">
                <img src="${recipe.image || 'assets/images/default-recipe.jpg'}" alt="${recipe.name}">
                <button class="favorite-btn" data-id="${recipe.id}"><i class="${starClass}"></i></button>
            </div>
            <div class="recipe-content">
                <span class="recipe-category">${recipe.category}</span>
                <h3 class="recipe-title">${recipe.name}</h3>
                <p class="recipe-description">${recipe.description.substring(0, 100)}...</p>
                <div class="recipe-meta">
                    <span class="meta-item"><i class="fas fa-clock"></i> ${recipe.time} ph√∫t</span>
                    <span class="meta-item"><i class="fas fa-utensils"></i> ${recipe.servings} kh·∫©u ph·∫ßn</span>
                </div>
                <div class="recipe-actions">
                    <button class="btn-primary view-details-btn">Xem chi ti·∫øt</button>
                    <button class="btn-secondary edit-btn" data-id="${recipe.id}"><i class="fas fa-edit"></i></button>
                    <button class="btn-secondary delete-btn" data-id="${recipe.id}"><i class="fas fa-trash"></i></button>
                </div>
            </div>
        `;
        
        // G·∫Øn s·ª± ki·ªán cho n√∫t Y√™u th√≠ch
        card.querySelector('.favorite-btn').addEventListener('click', (e) => {
            e.stopPropagation(); 
            this.toggleFavorite(recipe.id);
        });
        
        // G·∫Øn s·ª± ki·ªán cho n√∫t X√≥a
        card.querySelector('.delete-btn')?.addEventListener('click', (e) => {
            e.stopPropagation();
            this.deleteRecipe(recipe.id);
        });

        // G·∫Øn s·ª± ki·ªán cho n√∫t Ch·ªânh s·ª≠a
        card.querySelector('.edit-btn')?.addEventListener('click', (e) => {
            e.stopPropagation();
            this.editRecipe(recipe.id);
        });

        // G·∫Øn s·ª± ki·ªán cho Xem chi ti·∫øt (M·ªöI)
        card.querySelector('.view-details-btn')?.addEventListener('click', (e) => {
            e.stopPropagation();
            this.showRecipeDetailModal(recipe.id);
        });

        return card;
    }

    renderRecipes(recipesToRender = this.recipes) {
        const recipesGrid = document.getElementById("recipesGrid");
        const emptyState = document.getElementById("emptyState");
        recipesGrid.innerHTML = "";
        
        if (recipesToRender.length === 0) {
            recipesGrid.style.display = 'none';
            emptyState.style.display = 'block';
            document.getElementById("filteredRecipes").textContent = 0;
            return;
        }

        // Gi·ªØ l·∫°i logic CSS list-mode
        recipesGrid.style.display = this.currentView === 'grid' ? 'grid' : 'block';
        if (this.currentView === 'list') {
             recipesGrid.classList.add("list-mode");
        } else {
             recipesGrid.classList.remove("list-mode");
        }
        
        emptyState.style.display = 'none';

        recipesToRender.forEach(recipe => {
            const card = this.createRecipeCard(recipe);
            recipesGrid.appendChild(card);
        });

        document.getElementById("filteredRecipes").textContent = recipesToRender.length;
    }

    filterRecipes() {
        // ... (Logic gi·ªØ nguy√™n)
        const searchTerm = document.getElementById("searchInput")?.value.toLowerCase() || "";
        const category = document.getElementById("categoryFilter")?.value || "all";
        const difficulty = document.getElementById("difficultyFilter")?.value || "all";
        const time = Number(document.getElementById("timeFilter")?.value) || 0;
        const author = document.getElementById("authorFilter")?.value || "all";

        this.filteredRecipes = this.recipes.filter(recipe => {
            const matchesSearch = !searchTerm || 
                                  recipe.name.toLowerCase().includes(searchTerm) || 
                                  recipe.description.toLowerCase().includes(searchTerm) ||
                                  (recipe.tags && recipe.tags.some(tag => tag.toLowerCase().includes(searchTerm)));

            const matchesCategory = category === "all" || recipe.category === category;
            const matchesDifficulty = difficulty === "all" || recipe.difficulty === difficulty;

            const matchesTime = time === 0 || recipe.time <= time;
            
            const matchesAuthor = author === "all" || (author === "user" && recipe.author !== "Default") || (author === "default" && recipe.author === "Default");


            return matchesSearch && matchesCategory && matchesDifficulty && matchesTime && matchesAuthor;
        });

        this.renderRecipes(this.filteredRecipes);
        this.updateStats();
    }
    
    toggleFavorite(id) {
        const recipeId = Number(id);
        if (this.favorites.has(recipeId)) {
            this.favorites.delete(recipeId);
        } else {
            this.favorites.add(recipeId);
        }
        this.saveData();
        this.filterRecipes(); 
        this.updateStats();
    }
    
    editRecipe(id) {
        const recipeId = Number(id);
        const recipe = this.recipes.find(r => r.id === recipeId);
        if (recipe) {
            this.showAddRecipeModal(recipe);
        }
    }

    deleteRecipe(id) {
        const recipeId = Number(id);
        if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√¥ng th·ª©c n√†y?")) {
            this.recipes = this.recipes.filter(r => r.id !== recipeId);
            this.favorites.delete(recipeId); 
            this.saveData();
            this.filterRecipes();
            this.updateStats();
            alert("ƒê√£ x√≥a c√¥ng th·ª©c th√†nh c√¥ng.");
        }
    }
    
    toggleViewMode() {
        const recipesGrid = document.getElementById("recipesGrid")
        const viewModeBtn = document.getElementById("viewModeBtn")

        if (this.currentView === "grid") {
            this.currentView = "list"
            recipesGrid.classList.add("list-mode")
            viewModeBtn.innerHTML = '<i class="fas fa-th-large"></i> D·∫°ng l∆∞·ªõi'
        } else {
            this.currentView = "grid"
            recipesGrid.classList.remove("list-mode")
            viewModeBtn.innerHTML = '<i class="fas fa-list"></i> D·∫°ng danh s√°ch'
        }
        
        this.renderRecipes(this.filteredRecipes); 
    }

    updateStats() {
        const totalRecipes = this.recipes.length
        const userRecipes = this.recipes.filter((recipe) => recipe.author !== "Default").length
        const favoriteRecipes = this.favorites.size
        // ƒê√£ s·ª≠ d·ª•ng ID filteredRecipes
        const filteredRecipes = this.filteredRecipes.length 

        document.getElementById("totalRecipes").textContent = totalRecipes
        document.getElementById("userRecipes").textContent = userRecipes
        document.getElementById("favoriteRecipes").textContent = favoriteRecipes
        document.getElementById("filteredRecipes").textContent = filteredRecipes
    }
}

// Kh·ªüi t·∫°o h·ªá th·ªëng qu·∫£n l√Ω c√¥ng th·ª©c
new RecipeManager();